import telebot
import csv
import logging
import random
import time
import re
import statprocessor

class UsersList:
    def __init__(self, filename='/home/kias-x/PyLCLbot/users.csv'):
        self.filename = filename

    def isUserExists(self, user_id):
        with open(self.filename, mode='r') as file:
            reader = csv.reader(file)
            for row in reader:
                if str(user_id) == row[0]:
                    return True
        return False

    def addUser(self, user_id, username):
        if not self.isUserExists(user_id):
            with open(self.filename, mode='a', newline='') as file:
                writer = csv.writer(file)
                writer.writerow([user_id, username])
                logging.info(f"New user joined! User id: {user_id}, Username: {username}")

class BotProps:
    toxic_dict = {
    '–∫–æ–º—Ñ–æ—Ä—Ç–∏–∫ –¥–æ—Ö—É—è': range(0, 45),
    '—Ç–æ–∫—Å–∏–∫ –µ–±–∞–Ω—ã–π': range(46, 95),
    '–ø–∏–∑–¥–µ—Ü —Ç–æ–∫—Å–∏–∫, —Ç–∞–∫ –µ—â–µ –∏ –¥—É—à–Ω–∏–ª–∞': range(96, 146)
    }
    
    def __init__(self) -> None:
        pass
        
    def fightAssets(self):
        with open('fights.txt', 'r') as file:
            fights = [fight.strip() for fight in file.read().split(',')]
            print (fights)
        return random.choice(fights)
    
    def boobsSize(self):
        sizes = ["–Ω—É–ª–µ–≤–æ–≥–æ", "–ø–µ—Ä–≤–æ–≥–æ", "–≤—Ç–æ—Ä–æ–≥–æ", "—Ç—Ä–µ—Ç—å–µ–≥–æ", "—á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ"]
        return random.choice(sizes)
    
    def ballsMass(self):
        mass = random.randint(50, 1488)
        return str(mass) + " –≥—Ä–∞–º–º"
    
    def toxicLvl(self, username):
        lvl = random.randint(15, 146)
        # statusToxic = self.getStatusToxic(lvl)
        return "<b>–£—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ <u>" + str(lvl) + " %</u></b>\n\n" + username + " —Ç—ã <i>" + self.getToxicStatus(lvl) + "</i>"
    
    def getToxicStatus(self, toxicLvl):
        for level, range in self.toxic_dict.items():
            if toxicLvl in range:
                return level
    
    def fixUsername(self, message):
        if message.from_user.username == None:
            username = message.from_user.first_name
        else:
            username = message.from_user.username
        return username
    
    def extractUsername(self, message):
        username_pattern = r'@[\w]+'
        firstname_pattern = r'/fight\s+([\w\s]+)'
        match = re.search(username_pattern, message)
        if match:
            return match.group()
        match = re.search(firstname_pattern, message)
        if match:
            return match.group(1).strip()
        return None
    
    def removeAt(self, userString):
        if userString.startswith('@'):
            return userString[1:]
        else:
            return userString
    
    def pingProcessor(self):
        start_time = time.time()
        curTime = time.strftime('%H:%M:%S', time.localtime())
        end_time = time.time()
        execTime = end_time - start_time
        
        return f'–ë–æ—Ç –æ–Ω–ª–∞–π–Ω!\n–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {curTime}\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execTime} —Å'
        

class LCLBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.users_list = UsersList()
        self.props = BotProps()
        self.statistic = statprocessor.StatisticCSV()

    def commands(self):
        @self.bot.message_handler(commands=['start'])
        def handleStart(message):
            self.bot.send_message(message.chat.id, "<b>–¢—ã –ø–∏–¥–æ—Ä–∞—Å, {0.first_name}!</b>\n\n<i>@youarefagotbot</i> –≤—Å–µ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç —Ç–µ–±–µ –∫—Ç–æ —Ç—ã.".format(message.from_user), parse_mode='html')
            self.users_list.addUser(message.chat.id, message.chat.username)

        @self.bot.message_handler(commands=['help'])
        def handleStart(message):
            firstLine = "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n/whoami - —É–∑–Ω–∞—Ç—å –∫—Ç–æ —è\n\n"
            secondLine = "/whois @username - —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç–∞–∫–æ–π @username (–≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–ª)\n\n/fight @username - —É—Å—Ç—Ä–æ–∏—Ç—å –±–æ–π —Å @username (–≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)\n\n"
            thirdLine = "/toxic - –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ @username\n\n/boobsmetr - —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±—É–±—Å–æ–≤\n\n/ballsmetr - —É–∑–Ω–∞—Ç—å –º–∞—Å—Å—É —è–∏—Ü\n\n/getstat - —É–∑–Ω–∞—Ç—å –±–æ–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            self.bot.send_message(message.chat.id, firstLine + secondLine + thirdLine, parse_mode='html')
            
        @self.bot.message_handler(commands=['ping'])
        def handleMsg(message):
            logging.info("Ping command")
            self.bot.reply_to(message, f"<b>PONG!</b>", parse_mode='html')
            self.bot.reply_to(message, self.props.pingProcessor(), parse_mode='html')
            

        @self.bot.message_handler(commands=['whoami'])
        def handleMsg(message):
            logging.info("Whoami command")
            self.bot.send_message(message.chat.id, "<b>–¢—ã –ø–∏–¥–æ—Ä–∞—Å, {0.first_name}!</b>".format(message.from_user), parse_mode='html')
            
        @self.bot.message_handler(commands=['whois'])
        def handleMsg(message):
            logging.info("Whois command")
            if len(message.text.split()) == 2:
                username = message.text.split(' ')[1][0:]
                perc = random.randint(12, 150)
                self.bot.reply_to(message, f"<b>{username}</b> –ø–∏–¥–æ—Ä–∞—Å –Ω–∞ {perc}%", parse_mode='html')
            else:
                self.bot.reply_to(message, "–¢—ã –¥–æ–ª–±–æ–µ–±!\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ \n/whois @username\n–ó–∞–ø–æ–º–∏–Ω–∞–π!")

        @self.bot.message_handler(commands=['fight'])
        def fight(message):
            logging.info("Fight command")
            if len(message.text.split()) >= 2:
                sender_username = self.props.fixUsername(message)
                
                opponent_username = self.props.extractUsername(message.text)
                opponent_username_split = self.props.removeAt(opponent_username)
                
                if opponent_username_split == sender_username:
                    self.bot.reply_to(message, "–¢–´ –ß–ï, –î–û–õ–ë–û–ï–ë?\n–ù–∞—Ö—É–π —Ç—ã —Ç–∞–∫ –¥–µ–ª–∞–µ—à—å?")
                    
                else:
                    if sender_username == "elya_jpg":
                        winner = opponent_username
                    elif opponent_username_split == "elya_jpg":
                        winner = sender_username    
                    else: 
                        winner = random.choice([sender_username, opponent_username])
                        
                    if winner == sender_username:
                        self.statistic.statRec(sender_username, opponent_username_split)
                    else:
                        self.statistic.statRec(opponent_username_split, sender_username)
                    
                    punch = self.props.fightAssets()
                    self.bot.send_message(message.chat.id, f"ü•ä <b>–ë–û–ô –ú–ï–ñ–î–£</b> ü•ä\nü•ä <i>@{sender_username} –∏ {opponent_username}</i> ü•ä", parse_mode='html')
                    self.bot.send_message(message.chat.id, f"{winner} –ø—Ä–∏–º–µ–Ω–∏–ª \n\n<b><u>{punch}</u></b>\n\n\nüèÜ <b>–ü–û–ë–ï–î–ê!</b> üèÜ", parse_mode='html')
            else:
                self.bot.reply_to(message, "–¢—ã –¥–æ–ª–±–æ–µ–±!\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ \n/fight @username\n–ó–∞–ø–æ–º–∏–Ω–∞–π!")

        @self.bot.message_handler(commands=['boobsmetr'])
        def handleMsg(message):
            logging.info("Boobs command") 
            self.bot.reply_to(message, f"<b>{message.from_user.first_name}</b>, —Ç–≤–æ–∏ –±—É–±—Å—ã <u>{self.props.boobsSize()} —Ä–∞–∑–º–µ—Ä–∞!</u>", parse_mode='html')

        @self.bot.message_handler(commands=['ballsmetr'])
        def handleMsg(message):
            logging.info("Balls command")
            self.bot.reply_to(message, f"<b>{message.from_user.first_name}</b>, —Ç–≤–æ–∏ —è–π—Ü–∞ –≤–µ—Å—è—Ç <u>{self.props.ballsMass()}!</u>", parse_mode='html')
        
        @self.bot.message_handler(commands=['toxic'])
        def handleMsg(message):
            logging.info("Toxic command")
            if len(message.text.split()) == 2:
                username = message.text.split(' ')[1][0:]
                toxicAns = self.props.toxicLvl(username)
                self.bot.reply_to(message, toxicAns, parse_mode='html')
            else:
                self.bot.reply_to(message, "–¢—ã –¥–æ–ª–±–æ–µ–±!\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ \n/toxic @username\n–ó–∞–ø–æ–º–∏–Ω–∞–π!")
                
        @self.bot.message_handler(commands=['getstat'])
        def handleMsg(message):
            statUser = self.statistic.getStatUser(self.props.fixUsername(message))
            
            if statUser is None:
                logging.info("No stat ")
                self.bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –±–æ–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
                # self.bot.reply_to(message, f"<b>{message.from_user.first_name}</b>\n<b>—É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!", parse_mode='html')
            else:
                logging.info("GetStatistic " + statUser[0] + "   " + statUser[1])
                self.bot.reply_to(message, f"<b>{message.from_user.first_name}</b>\n<b>—É —Ç–µ–±—è {statUser[0]} –ø–æ–±–µ–¥ –∏ {statUser[1]} –ø–æ—Ä–∞–∂–µ–Ω–∏–π!</b>", parse_mode='html')
    
    def run(self):
        logging.info("Bot started!")
        self.bot.polling(none_stop=True)

if __name__ == "__main__":
    TOKEN = "1096148199:AAHIMdQ-HeWUOlbLmOj0ggYTPR6DQlASnJQ"
    logging.basicConfig(level=logging.INFO)
    
    bot_instance = LCLBot(TOKEN)
    bot_instance.commands()
    bot_instance.run()
